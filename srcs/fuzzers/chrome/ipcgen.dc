#include <fleeb.h>
#include <generic/stdlib.h>
#include <fuzzers/chrome/ipcgen.h>
#include <fuzzers/chrome/chrome_ipc.h>

static const uint8_t charset_alnum[]    = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
static const uint8_t charset_num[]      = "0123456789";
static const uint8_t charset_alpha[]    = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
static const uint8_t charset_alnumsym[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789`~!@#$%^&*()_-+=[{]}\\|;:'\",<.>/?";

static uint32_t
ipchdr_random_route(void)
{
	/* From our capture database, the following are the rough distribution of
	 * route ids.
	 *
	 * route 00000001 - 34.97%
	 * route 00000002 - 21.89%
	 * route 7fffffff - 21.72%
	 * route fffffffe -  0.10%
	 * all remaining  - 21.32% (none observed above 256)
	 */

	/* Generate a random route within a reasonable range */
	if(!(aes_rand() % 4))
		return aes_rand() % 256;

	/* Return a static route */
	if(!(aes_rand() % 4))
		return 0x7fffffff;

	/* Return a static route rarely */
	if(!(aes_rand() % 16))
		return 0xfffffffe;

	/* Randomly return 1 or 2. These are the most frequent routes, thus the
	 * most frequent we will generate.
	 */
	if(aes_rand() % 2)
		return 1;
	else
		return 2;
}

static uint64_t
ipcparam_int(
		_Out_writes_bytes_(len) uint8_t  *payload,
		_In_                    uint64_t  len)
{
	uint32_t rand_val = aes_rand() & 0xfff;
	
	if(len < sizeof(uint32_t))
		return 0;

	/* Generate completely random value */
	if(!(aes_rand() % 8))
		rand_val = aes_rand() & 0xffffffff;

	/* Generate random slightly negative value */
	if(!(aes_rand() % 8))
		rand_val = aes_rand() & 0xfff | 0xfffff000;
	
	/* Generate a 0 */
	if(!(aes_rand() % 8))
		rand_val = 0;

	*(uint32_t*)payload = rand_val;
	return sizeof(uint32_t);
}

static uint64_t
ipcparam_int64(
		_Out_writes_bytes_(len) uint8_t  *payload,
		_In_                    uint64_t  len)
{
	uint64_t rand_val = aes_rand() & 0xfff;
	
	if(len < sizeof(uint64_t))
		return 0;

	/* Generate completely random value */
	if(!(aes_rand() % 8))
		rand_val = aes_rand();

	/* Generate random slightly negative value */
	if(!(aes_rand() % 8))
		rand_val = (aes_rand() & 0xfff) | 0xfffffffffffff000ULL;
	
	/* Generate a 0 */
	if(!(aes_rand() % 8))
		rand_val = 0;

	*(uint64_t*)payload = rand_val;
	return sizeof(uint64_t);
}

static uint64_t
ipcparam_bool(
		_Out_writes_bytes_(len) uint8_t  *payload,
		_In_                    uint64_t  len)
{
	/* Bools are either 0x1 or 0x0. Just randomly pick one. */

	uint32_t rand_val;
	
	if(len < sizeof(uint32_t))
		return 0;

	rand_val = aes_rand() & 1;

	*(uint32_t*)payload = rand_val;
	return sizeof(uint32_t);
}

static uint64_t
ipcparam_hostresource(
		_Out_writes_bytes_(len) uint8_t  *payload,
		_In_                    uint64_t  len)
{
	struct _cipc_hostresource *ptr = (void*)payload;

	if(len < sizeof(*ptr))
		return 0;

	ptr->instance      = (aes_rand() & 0xffff) - 0x8000;
	ptr->host_resource = (aes_rand() & 0xffff) - 0x8000;

	return sizeof(*ptr);
}

static uint64_t
ipcparam_point(
		_Out_writes_bytes_(len) uint8_t  *payload,
		_In_                    uint64_t  len)
{
	struct _cipc_point *ptr = (void*)payload;

	if(len < sizeof(*ptr))
		return 0;

	ptr->x = (aes_rand() & 0xffff) - 0x8000;
	ptr->y = (aes_rand() & 0xffff) - 0x8000;

	return sizeof(*ptr);
}

static uint64_t
ipcparam_size(
		_Out_writes_bytes_(len) uint8_t  *payload,
		_In_                    uint64_t  len)
{
	struct _cipc_size *ptr = (void*)payload;

	if(len < sizeof(*ptr))
		return 0;

	ptr->width  = (aes_rand() & 0xffff) - 0x8000;
	ptr->height = (aes_rand() & 0xffff) - 0x8000;

	return sizeof(*ptr);
}

static uint64_t
ipcparam_rect(
		_Out_writes_bytes_(len) uint8_t  *payload,
		_In_                    uint64_t  len)
{
	struct _cipc_rect *ptr = (void*)payload;

	if(len < sizeof(*ptr))
		return 0;

	ptr->origin.x    = (aes_rand() & 0xffff) - 0x8000;
	ptr->origin.y    = (aes_rand() & 0xffff) - 0x8000;
	ptr->size.width  = (aes_rand() & 0xffff) - 0x8000;
	ptr->size.height = (aes_rand() & 0xffff) - 0x8000;

	return sizeof(*ptr);
}

static uint64_t
ipcparam_shared_memory_handle(
		_Out_writes_bytes_(len) uint8_t  *payload,
		_In_                    uint64_t  len)
{
	struct _cipc_shared_memory_handle *ptr = (void*)payload;

	if(len < sizeof(*ptr))
		return 0;

	ptr->handle = aes_rand() & 0xffff;
	ptr->pid    = aes_rand() & 0xffff;

	return sizeof(*ptr);
}

static uint64_t
ipcparam_double(
		_Out_writes_bytes_(len) uint8_t  *payload,
		_In_                    uint64_t  len)
{
	if(len < sizeof(double))
		return 0;

	*(uint64_t*)payload = aes_rand();

	return sizeof(double);
}

static uint64_t
ipcparam_std_string(
		_Out_writes_bytes_(len) uint8_t  *payload,
		_In_                    uint64_t  len)
{
	uint32_t str_len, ii;
	uint64_t generated = 0;
	
	/* Make sure there is room for the string length */
	if(len < sizeof(uint32_t))
		return 0;

	str_len = aes_rand() % 1024;
	*(uint32_t*)payload = str_len;
	payload   += sizeof(uint32_t);
	generated += sizeof(uint32_t);

	/* 4 byte align the length */
	str_len +=  0x3;
	str_len &= ~0x3;

	/* Make sure there is room for the string itself, and padding */
	if((len - generated) < str_len)
		return 0;

	for(ii = 0; ii < str_len; ii++){
		*payload = aes_rand() % 26 + 'A';

		payload++;
		generated++;
	}

	return generated;
}

static uint64_t
ipcparam_string16(
		_Out_writes_bytes_(len) uint8_t  *payload,
		_In_                    uint64_t  len)
{
	uint32_t str_len, ii;
	uint64_t generated = 0;
	
	/* Make sure there is room for the string length */
	if(len < sizeof(uint32_t))
		return 0;

	str_len = aes_rand() % 1024;
	*(uint32_t*)payload = str_len;
	payload   += sizeof(uint32_t);
	generated += sizeof(uint32_t);

	/* 4 byte align the length */
	str_len +=  0x3;
	str_len &= ~0x3;

	/* Make sure there is room for the string itself, and padding */
	if((len - generated) < str_len)
		return 0;

	for(ii = 0; ii < str_len; ii++){
		*payload = aes_rand() & 0xff;

		payload++;
		generated++;
	}

	return generated;
}

static uint64_t
ipcparam_gurl(
		_Out_writes_bytes_(len) uint8_t  *payload,
		_In_                    uint64_t  len)
{
	char temp[1024], *ptr, *scheme_sel;

	uint32_t ii;
	uint64_t generated = 0;
	
	char *scheme[] =
		{ "http://", "https://", "chrome-extension://", "chrome-search://", "ftp://", "file://", "//", "/" };

	ptr = temp;

	scheme_sel = scheme[aes_rand() % 8];
	memcpy(ptr, scheme_sel, strlen(scheme_sel));
	ptr += strlen(scheme_sel);

	/* Generate a domain */
	for(ii = 0; ii < (aes_rand() % 32); ii++)
		*ptr++ =  charset_alnum[aes_rand() % sizeof(charset_alnum)];

	*ptr++ = '.';

	if(aes_rand() % 4){
		/* Generate a TLD */
		for(ii = 0; ii < (aes_rand() % 32); ii++)
			*ptr++ =  charset_alnum[aes_rand() % sizeof(charset_alnum)];
	}

	/* Generate a port */
	if(!(aes_rand() % 32)){
		*ptr++ = ':';

		for(ii = 0; ii < (aes_rand() % 4); ii++){
			*ptr++ = charset_num[aes_rand() % sizeof(charset_num)];
		}
	}

	*ptr++ = '/';

	/* Generate a random path */
	for(ii = 0; ii < (aes_rand() % 64); ii++)
		*ptr++ = charset_alnumsym[aes_rand() % sizeof(charset_alnumsym)];

	generated  = sizeof(uint32_t) + (ptr - temp);
	generated +=  0x3;
	generated &= ~0x3;

	if(len < generated)
		return 0;

	*(uint32_t*)payload = (uint32_t)(ptr - temp);
	payload += sizeof(uint32_t);

	memcpy(payload, temp, generated);
	return generated;
	
}

static uint64_t
generic_gen_ipc(
		_In_                    const struct _chrome_ipc *ipc,
		_Out_writes_bytes_(len) uint8_t                  *payload,
	   	_In_                    uint64_t                  len)
{
	int param_id;
	uint64_t generated = 0;

	struct _chrome_ipc_header *header = (struct _chrome_ipc_header*)payload;

	/* Need at least enough room for the IPC header */
	if(len < sizeof(struct _chrome_ipc_header))
		return 0;

	header->length        = 0;
	header->route         = ipchdr_random_route();
	header->msg_id        = ipc->ipc_id;
	header->flags.backing = 0;
	payload   += sizeof(struct _chrome_ipc_header);
	generated += sizeof(struct _chrome_ipc_header);

	for(param_id = 0; param_id < ipc->in_params; param_id++){
		uint64_t param_len, remain;

		remain = len - generated;

		switch(ipc->params[param_id]){
			case IPCTYPE_INT:
				param_len = ipcparam_int(payload, remain);
				break;
			case IPCTYPE_BOOL:
				param_len = ipcparam_bool(payload, remain);
				break;
			case IPCTYPE_STD_STRING:
				param_len = ipcparam_std_string(payload, remain);
				break;
			case IPCTYPE_GURL:
				param_len = ipcparam_gurl(payload, remain);
				break;
			case IPCTYPE_INT64:
				param_len = ipcparam_int64(payload, remain);
				break;
			case IPCTYPE_STRING16:
				param_len = ipcparam_string16(payload, remain);
				break;
			case IPCTYPE_HOSTRESOURCE:
				param_len = ipcparam_hostresource(payload, remain);
				break;
			case IPCTYPE_SHARED_MEMORY_HANDLE:
				param_len = ipcparam_shared_memory_handle(payload, remain);
				break;
			case IPCTYPE_POINT:
				param_len = ipcparam_point(payload, remain);
				break;
			case IPCTYPE_SIZE:
				param_len = ipcparam_size(payload, remain);
				break;
			case IPCTYPE_RECT:
				param_len = ipcparam_rect(payload, remain);
				break;
			case IPCTYPE_DOUBLE:
				param_len = ipcparam_double(payload, remain);
				break;
			default:
				/* Unhandled param type */
				return 0;
		}

		if(!param_len)
			return 0;

		payload   += param_len;
		generated += param_len;
	}

	header->length = (uint32_t)generated - 0x14;

	return generated;
}

uint64_t
gen_ipc_stream(_Out_writes_bytes_(len) uint8_t *payload, _In_ uint64_t len,
		_In_ uint64_t max_messages)
{
	uint64_t stream_generated = 0, num_messages = 0;

	for( ; ; ){
		uint64_t msg_generated;

		const struct _chrome_ipc *ipc = NULL;

		if(max_messages && num_messages == max_messages)
			break;
		
		ipc = &chrome_ipcdefs[aes_rand() % CHROME_NUM_IPCDEFS];
		while(ipc->in_params == -1)
			ipc = &chrome_ipcdefs[aes_rand() % CHROME_NUM_IPCDEFS];

		/* If this IPC has it's own custom generator, use that, otherwise
		 * invoke the generic generator.
		 */
		if(ipc->func){
			/* Implement custom generator handlers */
			panic("We do not support custom ipc generators");
		} else {
			msg_generated = generic_gen_ipc(ipc, payload, len - stream_generated);
			num_messages++;

			/* If we weren't able to generate a message for this IPC, and we
			 * have at least generated something in this stream, end generation
			 * of the stream.
			 */
			if(!msg_generated && stream_generated)
				break;

			payload          += msg_generated;
			stream_generated += msg_generated;
		}

	}

	return stream_generated;
}

uint64_t
gen_ipc_rand(_Out_writes_bytes_(len) uint8_t *payload, _In_ uint64_t len,
		_In_ uint64_t max_messages)
{
	uint64_t msg, generated = 0;

	for(msg = 0; msg < max_messages; msg++){
		uint8_t *data;

		uint64_t jj;

		const struct _chrome_ipc *ipc;

		struct _chrome_ipc_header *hdr = (void*)payload;

		if(len < sizeof(struct _chrome_ipc_header))
			goto end;

		/* Pick a random IPC */
		ipc = &chrome_ipcdefs[aes_rand() % CHROME_NUM_IPCDEFS];

		hdr->length        = aes_rand() % 1024;
		hdr->route         = ipchdr_random_route();
		hdr->msg_id        = ipc->ipc_id;
		hdr->flags.backing = aes_rand() & 0xffffffff;

		hdr->length +=  3;
		hdr->length &= ~3;

		data = (void*)(hdr + 1);

		if(len < (sizeof(struct _chrome_ipc_header) + hdr->length))
			goto end;

		for(jj = 0; jj < hdr->length; ){
			uint64_t sel = aes_rand() % 4;
			uint64_t rem = hdr->length - jj;

			if(sel == 0 && rem >= 1){
				*(uint8_t*)(data + jj) = aes_rand() & 0xff;
				jj += 1;
			}

			if(sel == 1 && rem >= 2){
				*(uint16_t*)(data + jj) = aes_rand() & 0xffff;
				jj += 2;
			}

			if(sel == 2 && rem >= 4){
				*(uint32_t*)(data + jj) = aes_rand() & 0xffff;
				jj += 4;
			}

			if(sel == 3 && rem >= 8){
				*(uint64_t*)(data + jj) = aes_rand() & 0xffff;
				jj += 8;
			}
		}

		payload += (sizeof(struct _chrome_ipc_header) + hdr->length);
		len     -= (sizeof(struct _chrome_ipc_header) + hdr->length);

		generated += (sizeof(struct _chrome_ipc_header) + hdr->length);
	}

end:
	return generated;
}

